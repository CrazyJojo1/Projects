str(fin)
#.........................FVT example
fin$Expenses
#.........................FVT example
fin$Profit <- factor(fin$Profit)
fin$Profit
str(fin)
#convert profit factor into numeric
fin$Profit <- as.character(fin$Profit)
fin$Profit
fin$Profit <- as.numeric(fin$Profit)
fin$Profit
head(fin)
str(fin)
summary(fin)
head(fin)
#............sub() and gsub()
?sub
#since we need to replace , $ Dollars % space - so we will be using gsub()
#...................
head(fin)
#"", means replace it with nothing (empty)
fin$Expenses <- gsub(" Dollars","",fin$Expenses)
head(fin)
#replace the commas
fin$Expenses <- gsub(",","",fin$Expenses)
head(fin)
str(fin)
#how to create an escape sequence??
#use \\ before the dollar sign
fin$Revenue <- gsub("\\$","",fin$Revenue)
head(fin)
#remove commas
fin$Revenue <- gsub(",","",fin$Revenue)
head(fin)
str(fin)
#............now use as.numeric()
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
head(fin)
str(fin)
#remove %
fin$Growth <- gsub("%","",fin$Growth)
head(fin)
str(fin)
fin$Growth <- as.numeric(fin$Growth)
head(fin)
str(fin)
summary(fin)
#.....................
#creating a data frame
df<-data.frame(Column_1 = c('Florida','Germany','Georgia','Geniva','Istanbul','NewZealand','Australia'), Column_2=c(1,2,3,4,5,6,7))
#data frame
df
sub("G","A",df)
#data frame
df
df1 <- sub("G","A",df)
df1
df1 <- gsub("G","A",df)
df1
#............factor variable trap (FVT)
#converting a factor into a non-factor
#let's create a vector
a <- c("12","13","14","12","12")
a
b <- as.numeric(a) #explicit coercion
typeof(b)
#..........how to convert factors into numeric
#create a factor
z <- factor(c("12","13","14","12","12"))
#z is the factorized version
z
levels(z)
y <- as.numeric(z)
y
#vectors have changed
#.............
typeof(z)
#z is an integer, but integer part of z is the factorization integer
#this means when R converts something into factors:
#it assign an integer to its category(levels)
#first level takes the value of 1
#2nd level takes the value of 2 and so on.
z <- factor(c("12","13","14","12","12"))
#12 =1, 13=2, 14=3
class(z)
#.............fix??
#step1: convert factor variable into a character vector
#step2 : convert character vector into numeric vector
y <- as.character(z)
c <- as.numeric(y)
c
#now values are the same.
rm(a,b,c,y,z)
#.........................FVT example
fin$Profit <- factor(fin$Profit)
fin$Profit
str(fin)
#convert profit factor into numeric
fin$Profit <- as.character(fin$Profit)
fin$Profit <- as.numeric(fin$Profit)
head(fin)
str(fin)
summary(fin)
#use (cmd+option+i) to start a new chunk code in R notebook.
#...............Project brief
#Financial review:
#list of 500 companies,
#create visualizations for upcoming online publicatiion
#1. A scatter plot showing revenue, expenses and profit.
#2 scatterplot between expenses vs revenue relationship
#3. Bosplots showing growth by industry
#Elephant in the room?
#data that you will be importing will have numerous discrepancies.
#...............importing data
getwd()
setwd("/Users/rajanbawa/Documents/R work/Advanced.R/Task1-Assignment.Prep")
getwd()
fin<- read.csv("fortune.500.csv")
#exploring data
head(fin)
tail(fin)
str(fin)
#revenue, expenses and growth are character vectors
#Industry, Inception could be a factor variable
summary(fin)
dim(fin)
nrow(fin)
View(fin)
anyNA(fin)#imported data has missing value
#......changing from non-factor to a factor (categorical variable)
fin$ID <- factor(fin$ID)
fin$Industry <- factor(fin$Industry)
fin$Inception <- factor(fin$Inception)
fin$State <- factor(fin$State)
fin$City <- factor(fin$City)
#check if these columns got converted into factors
levels(fin$ID)
levels(fin$Industry)
levels(fin$Inception)
levels(fin$State)
levels(fin$City)
str(fin)
#"", means replace it with nothing (empty)
fin$Expenses <- gsub(" Dollars","",fin$Expenses)
fin$Expenses
#use (cmd+option+i) to start a new chunk code in R notebook.
#...............Project brief
#Financial review:
#list of 500 companies,
#create visualizations for upcoming online publicatiion
#1. A scatter plot showing revenue, expenses and profit.
#2 scatterplot between expenses vs revenue relationship
#3. Bosplots showing growth by industry
#Elephant in the room?
#data that you will be importing will have numerous discrepancies.
#...............importing data
getwd()
setwd("/Users/rajanbawa/Documents/R work/Advanced.R/Task1-Assignment.Prep")
getwd()
fin<- read.csv("fortune.500.csv")
#exploring data
head(fin)
tail(fin)
str(fin)
#revenue, expenses and growth are character vectors
#Industry, Inception could be a factor variable
summary(fin)
dim(fin)
nrow(fin)
View(fin)
anyNA(fin)#imported data has missing value
#......changing from non-factor to a factor (categorical variable)
fin$ID <- factor(fin$ID)
fin$Industry <- factor(fin$Industry)
fin$Inception <- factor(fin$Inception)
fin$State <- factor(fin$State)
fin$City <- factor(fin$City)
#check if these columns got converted into factors
levels(fin$ID)
levels(fin$Industry)
levels(fin$Inception)
levels(fin$State)
levels(fin$City)
str(fin)
#exploring data
head(fin)
x <- "I love R. R is a statistical language"
gsub("R","R language",x)
sub("R","R language",x)
#............sub() and gsub()
?sub
#they look for pattern and then replace it (x is where to look for the pattern)
#sub() - used to replace the first instance
#gsub() - used to replace all of the matches respectively
#since we need to replace , $ Dollars % space - so we will be using gsub()
#...................
head(fin)
#syntax for gsub()
# gsub(pattern,
#what you want to replace it with,
#where do we look for pattern)
#"", means replace it with nothing (empty)
fin$Expenses <- gsub(" Dollars","",fin$Expenses)
head(fin) #Dollars is removed
#replace the commas
fin$Expenses <- gsub(",","",fin$Expenses)
head(fin) #commas are removed
str(fin)
#revenue
fin$Revenue <- gsub("$","",fin$Revenue)
# above command will not remove the $
#why?
#R recognizes $ as special character....you use $ for data frame column, etc
#If you need to address the dollar sign ($) in its character meaning
#then you need to create an escape sequence
#how to create an escape sequence??
#use \\ before the dollar sign
fin$Revenue <- gsub("\\$","",fin$Revenue)
head(fin) # you successfully removed dollar sign
#remove commas
fin$Revenue <- gsub(",","",fin$Revenue)
head(fin)
str(fin)
#remove %
fin$Growth <- gsub("%","",fin$Growth)
head(fin)
str(fin)
#............now use as.numeric()
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
head(fin)
str(fin)
summary(fin)
#.....................
#creating a data frame
df<-data.frame(Column_1 = c('Florida','Germany','Georgia','Geniva','Istanbul','NewZealand','Australia'), Column_2=c(1,2,3,4,5,6,7))
#data frame
df
df1 <- gsub("G","A",df)
x <- "I love R. R is a statistical language"
gsub("R","R language",x)
sub("R","R language",x)
fin$Expenses
#Functions
#packages
# important functions for packages:
#install.package()
installed.packages()
#update.packages()
#library()/detach()
old.packages()
#Vignetters()
vignette(lapply)
#Vignetters()
vignette(sapply)
#Vignetters()
vignettes(sapply)
#Vignetters()
?vignette()
vignette(sapply)
vignette("sapply")
vignette("apply")
?NA
TRUE == FALSE
FALSE == FALSE
FALSE == 0
NA == TRUE
15 == NA
NA == NA
View(fin)
?NA
#Just like TRUE and FALSE (2 logical constants), NA is also
#a logical constant of length 1
length(NA)
x <- c(1,2,3,4,NA,7)
mean(x)
mean(x,na.rm=TRUE)
head(fin,n=24)
head(fin,n=24)
head(fin,n=24)
#how do we pull out rows that contain missing data
sapply(fin,NA)
#how do we pull out rows that contain missing data
complete.cases(fin)
#syntax :- complete.cases(name of data frame)
#you will get a logical vector
?complete.cases
#using filtering in subsetting
fin[complete.cases(fin),]
#using filtering in subsetting
fin[complete.cases(fin),]
#but we are looking for FALSE value
fin[!complete.cases(fin),]
fin[complete.cases(fin),]
#but we are looking for FALSE value
fin[!complete.cases(fin),]
#solution
#convert blank spaces to NA right at the time of import
getwd()
fin1 <- read.csv("fortune.500.csv",na.strings=c(""))
fin <- read.csv("fortune.500.csv",na.strings=c(""))
fin <- read.csv("fortune.500.csv",na.strings=c(""))
#but we are looking for FALSE value
fin[!complete.cases(fin),]
head(fin,24)
fin[!complete.cases(fin),]
fin[!complete.cases(fin),]
#why you have NA and <NA> ??
#this has something to do with the structure
str(fin)
#.............sth we covered yesterday
fin$ID <- factor(fin$ID)
fin$Industry <- factor(fin$Industry)
fin$Inception <- factor(fin$Inception)
fin$Revenue <- gsub("\\$","",fin$Revenue)
fin$Revenue <- gsub(",","",fin$Revenue)
#why you have NA and <NA> ??
#this has something to do with the structure
str(fin)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Expenses <- gsub(" Dollars","",fin$Expenses)
fin$Expenses <- gsub(",","",fin$Expenses)
#why you have NA and <NA> ??
#this has something to do with the structure
str(fin)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Growth <- gsub("%","",fin$Growth)
#why you have NA and <NA> ??
#this has something to do with the structure
str(fin)
fin$Growth <- as.numeric(fin$Growth)
#why you have NA and <NA> ??
#this has something to do with the structure
str(fin)
fin[!complete.cases(fin),]
fin[!complete.cases(fin),]
#Filtering : using which() for non-missing data
head(fin)
#you want to get rows that have revenue of 9746272.
fin[fin$Revenue == 9746272, ]
#you want to get rows that have revenue of 9746272.
fin[fin$Revenue == 9746272, ]
#you get two rows that contain NA.
#??
#Data contains NA values and when you compare NA == 9746272
NA == 9746272
#you get an NA
<NA> == 9746272
fin$Revenue == 9746272
which
which(fin$Revenue == 9746272)
?which
fin$Revenue == 9746272
fin[which(fin$Revenue == 9746272),]
#which() gives you row number that meets the condition
fin[3,]
#pick out all the companies that have 45 employees
head(fin)
which(fin$Employees ==45)
#we get 10 row numbers
fin[which(fin$Employees ==45),]
#we get 10 row numbers
fin[c(5,137,183,200,208,245,360,380,435,487)]
#we get 10 row numbers
fin[c(5,137,183,200,208,245,360,380,435,487),]
#this is similar to
fin[c(5,137,183,200,208,245,360,380,435,487),]
#you want to get rows that have revenue of 9746272.
fin[fin$Revenue == 9746272, ]
?is.na
head(fin,n=24)
#pickout missing values from the expenses column
fin[!which(fin$Expenses),]
?which
#pickout missing values from the expenses column
fin[!which(fin$Expenses),]
which(fin$Expenses)
#pickout missing values from the expenses column
fin[which(fin$Expenses == NA),]
#is.na()
#this functions checks if something is an NA.
is.na(fin$Expenses)
fin[is.na(fin$Expenses),]
head(fin,n=24)
fin[is.na(fin$State),]
fin[is.na(fin$Expenses),]
fin[is.na(fin$Expenses),]
View(fin)
#backup data frame
fin.backup <- fin
#find rows in Industy column that has missing values
is.na(fin$Industry)
#find rows in Industy column that has missing values
fin[is.na(fin$Industry),]
#all missing values
complete.cases(fin)
#all missing values
!complete.cases(fin)
#all missing values
fin[!complete.cases(fin),]
#find rows in Industry column that has missing values
fin[is.na(fin$Industry),]
#which rows in fin$Industry have no missing value
fin[!is.na(fin$Industry),]
#which rows in fin$Industry have no missing value
fin[!is.na(fin$Industry),]
#now all missing values have gone...... save this subset as your data frame
fin <- fin[!is.na(fin$Industry),]
fin
#find rows in Industry column that has missing values
fin[is.na(fin$Industry),]
View(fin)
rownames(fin)
nrow(fin)
rownames(fin)
1 : nrow(fin) #1:498
rownames(fin <- 1: nrow(fin))
rownames(fin) <- 1: nrow(fin))
rownames(fin) <- 1: nrow(fin)
#Removing rows that contain missing data
#we may wish to remove data from Industry column
#??
#we will be using Industry column and leaving a missing value will not be good
#Tip:
#When working with data.... ALWAYS have a backup
#so if anything goes wrong. We can always restore it.
#backup data frame
fin.backup <- fin
#all missing values
fin[!complete.cases(fin),]
#find rows in Industry column that has missing values
fin[is.na(fin$Industry),]
#which rows in fin$Industry have no missing value
fin[!is.na(fin$Industry),]
#now all missing values have gone...... save this subset as your data frame
fin <- fin[!is.na(fin$Industry),]
fin
#note: you have fin.backup as your backup
#Resetting the data frame index
#since you removed row 14 and 15, your row index(rownames) are not in sequence.
#It still looks like we have 500 rows, when in fact we have 498 rows
#Unlike Excel, R recognises them as rownames. When you delete them... the rest of the rownames remains as it is
rownames(fin)
nrow(fin)
1 : nrow(fin) #1:498
rownames(fin) <- 1: nrow(fin)
fin
head(fin,n=24)
#you have couple of empty cells
# na in brackets (<NA>) -- why is it in brackets??
#NA
#how do we pull out rows that contain missing data
complete.cases(fin)
#syntax :- complete.cases(name of data frame)
#you will get a logical vector
?complete.cases
#it checks row by row....
#if any rows contains missing value - you get FALSE
#using filtering in subsetting
fin[complete.cases(fin),] #this willl pick only rows that contain TRUE values
#but we are looking for FALSE value
fin[!complete.cases(fin),]
#this is not picking empty cells.
#solution
#convert blank spaces to NA right at the time of import
getwd()
fin <- read.csv("fortune.500.csv",na.strings=c(""))
head(fin,24)
#.............sth we covered yesterday
fin$ID <- factor(fin$ID)
fin$Industry <- factor(fin$Industry)
fin$Inception <- factor(fin$Inception)
fin$Revenue <- gsub("\\$","",fin$Revenue)
fin$Revenue <- gsub(",","",fin$Revenue)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Expenses <- gsub(" Dollars","",fin$Expenses)
fin$Expenses <- gsub(",","",fin$Expenses)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Growth <- gsub("%","",fin$Growth)
fin$Growth <- as.numeric(fin$Growth)
#........................................
fin[!complete.cases(fin),]
#na.strings means what strings to replace with NA
#c("") means empty vectors
#c("","NY") will replace all NY and empty cells into NA.
#this replaces all empty cells with <NA>
#why you have NA and <NA> ??
#this has something to do with the structure
str(fin)
#characters or factor variables are represented by <NA>
#numeric value is represented by NA.
#backup data frame
fin.backup <- fin
#all missing values
fin[!complete.cases(fin),]
#find rows in Industry column that has missing values
fin[is.na(fin$Industry),]
#which rows in fin$Industry have no missing value
fin[!is.na(fin$Industry),]
#now all missing values have gone...... save this subset as your data frame
fin <- fin[!is.na(fin$Industry),]
fin
rownames(fin)
nrow(fin)
1 : nrow(fin) #1:498
rownames(fin) <- 1: nrow(fin)
fin
fin
View(fin)
